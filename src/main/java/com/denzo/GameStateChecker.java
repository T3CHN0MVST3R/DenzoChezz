package com.denzo;

import com.denzo.board.Board;

/**
 * Абстрактный класс для проверки состояния шахматной игры.
 *
 * <p>
 * Этот класс определяет общий интерфейс для всех проверяющих состояний игры,
 * таких как мат, пат, шах и другие возможные состояния. Конкретные реализации
 * должны наследоваться от этого класса и реализовывать метод {@link #check(Board, Color)},
 * который анализирует текущее состояние доски и определяет, достигнуто ли какое-либо
 * из специфических состояний игры для заданного игрока.
 */
public abstract class GameStateChecker {

    /**
     * Проверяет текущее состояние игры для заданного игрока.
     *
     * <p>
     * Метод анализирует позицию на доске и определяет, находится ли игра в каком-либо
     * из специальных состояний (например, мат, пат, шах). Результатом является одно из значений
     * перечисления {@link GameState}, которое описывает текущее состояние игры.
     * </p>
     *
     * <p>
     * Конкретные реализации этого метода должны содержать логику проверки соответствующего
     * состояния игры. Например, класс {@link CheckmateGameStateChecker} реализует проверку
     * на мат, а класс {@link StalemateGameStateChecker} — на пат.
     * </p>
     *
     * @param board текущая шахматная доска, отображающая расположение всех фигур.
     * @param color цвет игрока (WHITE или BLACK), для которого проверяется состояние игры.
     * @return {@link GameState} — текущее состояние игры для указанного игрока.
     *         Возможные значения включают {@link GameState#ONGOING},
     *         {@link GameState#CHECKMATE_TO_WHITE_KING}, {@link GameState#CHECKMATE_TO_BLACK_KING},
     *         {@link GameState#STALEMATE}, и другие, в зависимости от реализации.
     */
    public abstract GameState check(Board board, Color color);
}
